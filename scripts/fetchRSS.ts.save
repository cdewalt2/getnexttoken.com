// scripts/fetchRSS.ts

const axios = require("axios");
const { XMLParser } = require("fast-xml-parser");
const http = require ("h

const parser = new XMLParser();

/**
 * RSSArticle defines the structure for parsed RSS items.
 */
type RSSArticle = {
  title: string;
  link: string;
  description: string;
  publishedDate: string;
};

const rssSources = [
  {
    name: "NYTimes Tech",
    url: "https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml",
  },
  {
    name: "Wired",
    url: "https://www.wired.com/feed/rss",
  },
  {
    name: "The Verge",
    url: "https://www.theverge.com/rss/index.xml",
  },
  {
    name: "Ars Technica",
    url: "https://feeds.arstechnica.com/arstechnica/index",
  },
  {
    name: "ZDNet",
    url: "https://www.zdnet.com/news/rss.xml",
  },
];

async function runRSSFetcher(): Promise<string> {
  let combinedFeed: string[] = [];

  for (const source of rssSources) {
    try {
      console.log(`üåê Fetching: ${source.url}`);
      const response = await axios.get(source.url, {
        proxy.false,
	responseType: "text",
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
          "Accept": "application/rss+xml,application/xml;q=0.9,*/*;q=0.8",
        },
      });

      const xml = response.data;
      const json = parser.parse(xml);
      const items = json.rss?.channel?.item || [];

      const articles = items.slice(0, 3).map((item: any): RSSArticle => ({
        title: item.title,
        link: item.link,
        description: item.description || item["content:encoded"] || "",
        publishedDate: item.pubDate || "",
      }));

      await axios.post("https://getnexttoken.com/api/rss_feeds", {
        sourceName: source.name,
        sourceURL: source.url,
        articles,
      });

      combinedFeed.push(`<!-- ${source.name} -->`);
      for (const article of articles) {
        combinedFeed.push(`
<item>
  <title><![CDATA[${article.title}]]></title>
  <link>${article.link}</link>
  <description><![CDATA[${article.description}]]></description>
  <pubDate>${article.publishedDate}</pubDate>
</item>`);
      }

      console.log(`‚úÖ Fetched and pushed articles from ${source.name}`);
    } catch (err: any) {
      if (err.response) {
        console.error(`‚ùå Failed to fetch ${source.name}: ${err.message}`);
        console.error("‚Ü™Ô∏è Response status:", err.response.status);
        console.error("‚Ü™Ô∏è Response headers:", err.response.headers);
        console.error("‚Ü™Ô∏è Response body (first 500 chars):", err.response.data?.substring(0, 500));
      } else if (err.request) {
        console.error(`‚ùå No response from ${source.name}:`, err.request);
      } else {
        console.error(`‚ùå Failed to fetch ${source.name}:`, err.message);
      }
    }
  }

  const fullRSS = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
  <channel>
    <title>GetNextToken Combined Feed</title>
    <link>https://getnexttoken.com</link>
    <description>A combined feed of tech sources</description>
    ${combinedFeed.join("\n")}
  </channel>
</rss>`;

  return fullRSS;
}

module.exports = { runRSSFetcher };
